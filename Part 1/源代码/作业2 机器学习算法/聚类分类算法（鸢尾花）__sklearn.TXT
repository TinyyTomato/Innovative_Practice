#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h> 
#include <time.h>

#define Maxdata_num 200 //最大数据量
#define Cluster_num 3   //iris种类 

/*
1.先将所有的数据读入，将其打乱之后写入文本，获取到两个输入数据，数据的处理包括：
	1.鸢尾花的四个参数和ID
	2.质心的各个参数
	3.每个鸢尾花到各个质心之间的距离
2.进行计算：
	1.随机获取到三个质心，并对这三个质心进行编号
	2.把所有鸢尾花到这三个质心的距离进行计算
	3.每个聚类中的数据求取平均值获得新的质心
	4.如果新的质心和原来的质心相同，聚类结束
3.将分析所得的数据写入文本，其中包括：
	1.所有的数据
	2.正确与否、正确率
*/

struct Iris{
    double l1, w1, l2, w2;
    int ID, num;  //种类和序号
    char name[20];//花的名字
};

struct Iris iris[Maxdata_num];//储存鸢尾花的数据
struct Iris original_centroid[Cluster_num];//储存原来三个质心的数据
struct Iris calculated_centroid[Cluster_num];//储存计算出来的质心的数据
int data_num;

void random_data();//将数据乱序，将乱序之后的数据写入文件
void read_data();//读入数据
void read_random_data();//读入乱序后的数据
void calculate();
int  classify(int num);//聚类
void write_result(char *fname);//写入数据
void analyze(char *fname);//分析数据 
void get_centroid();//获取随机质心
void get_calculated_centroid();//计算新的质心
int need_continue();//判断是否继续 
int get_max(int *a); 

int main(){
    char fname1[30] = {"oriData_result.txt"};
    char fname2[30] = {"ranData_result.txt"};
    read_data();//读取数据
    random_data();//生成打乱的数据

    printf("原始数据结果:\n");
    calculate();
    write_result(fname1);
    analyze(fname1);

    printf("\n随机数据结果:\n");
    read_random_data();
    calculate();
    write_result(fname2);
    analyze(fname2);
    return 0;
}


void read_data(){
    printf("请输入文件名字:");
    char fname[20];
    scanf("%s", fname);
    FILE *fp;
    if ((fp = fopen("data.txt", "r")) == NULL){
        printf("文件无法打开");
        exit(0);
    }
    int i = 0;
    while (!feof(fp)){
        fscanf(fp, "%lf,%lf,%lf,%lf,Iris-%s", &iris[i].l1, &iris[i].w1, &iris[i].l2, &iris[i].w2, iris[i].name);//读入所有数据
        iris[i].ID = -1;//初始化ID
        iris[i].num = i;//进行编号
        i++;
    }
    data_num = i - 1;//获取数据的个数
    fclose(fp);
}

void read_random_data(){
    FILE *fp;
    if ((fp = fopen("ranData.txt", "r")) == NULL){
        printf("文件无法打开");
        exit(0);
    }
    int i = 0;
    while (!feof(fp)){
        fscanf(fp, "%d:%lf,%lf,%lf,%lf,Iris-%s",
               &iris[i].num, &iris[i].l1, &iris[i].w1, &iris[i].l2, &iris[i].w2, iris[i].name);//读入所有数据
        iris[i].ID = -1;//初始化ID
        i++;
    }
    data_num = i - 1;//获取数据的个数
    fclose(fp);
}

void random_data(){
    srand(time(0));
    int flag[150]={};//初始化为0，若已写入文件则为1
    int random, num = 0;//计数
    FILE *fpp;
    if ((fpp = fopen("ranData.txt", "w")) == NULL){
        printf("文件无法打开");
        exit(0);
    }
    for (int i = 0; num < data_num; i++){
        random = rand() % data_num;
        //随机获取到一条数据，如果已经写入则重新生成，若没有则写入并计数
        if (flag[random] == 1){
            continue;
        }else{
            fprintf(fpp, "%4d:%lf,%lf,%lf,%lf,Iris-%s\n",
                    iris[random].num, iris[random].l1, iris[random].w1, iris[random].l2, iris[random].w2, iris[random].name);
            flag[random] = 1;
            num++;
        }
    }
    fclose(fpp);
}

void calculate(){
    int k = 0;
    //随机获取到三个质心
    get_centroid();
    //进行分类
    printf("%d calculate:\n", ++k);
    for (int i = 0; i < data_num; i++){
        iris[i].ID = classify(i);
    }
    get_calculated_centroid();
    while (need_continue()) {//如果需要继续
        for (int i = 0; i < Cluster_num; i++){//先把原来的点替换
            original_centroid[i] = calculated_centroid[i];
        }
        //再进行分类
        printf("%d calculate:\n", ++k);
        for (int i = 0; i < data_num; i++){
            iris[i].ID = classify(i);
        }
        //计算新的质心
        get_calculated_centroid();
    }

}

void get_centroid(){
    int flag = 0;
	//0表示没有重复，1表示重复
    srand(time(0));
    for (int i = 0; i < Cluster_num; i++){
        int random = rand() % data_num;
        original_centroid[i] = iris[random];
		//随机选择一个质心
        for (int j = 0; j < i; j++){
		//判断是否重复选择
            if (random == original_centroid[j].num) i--;
			//如果相同重新生成
        }
    }
}

int classify(int num){
    double distance[Cluster_num];
	//储存单个鸢尾花到每个质心的距离
    for (int i = 0; i < Cluster_num; i++){
        //计算的是当前传入的编号数据到第i个质心的距离
        double x1 = pow((iris[num].l1 - original_centroid[i].l1), 2.0);
        double x2 = pow((iris[num].l2 - original_centroid[i].l2), 2.0);
        double x3 = pow((iris[num].w1 - original_centroid[i].w1), 2.0);
        double x4 = pow((iris[num].w2 - original_centroid[i].w2), 2.0);
        distance[i] = sqrt(x1 + x2 + x3 + x4);
    }
    //得到最小距离并将分类结果返回
    int index = 0;
    double min = distance[0];
    for (int i = 1; i < Cluster_num; i++){
        if (min > distance[i]){
            index = i;
            min = distance[i];
        }
    }
    return index;
}

void get_calculated_centroid(){
    int num[Cluster_num] = {0};
    //记录每个分类中数据个数
    memset(calculated_centroid, 0, sizeof(calculated_centroid));
    //清空：void *memset(void *s, int ch, size_t n);
    for (int i = 0; i < data_num; i++){
        calculated_centroid[iris[i].ID].l1 += iris[i].l1;
        calculated_centroid[iris[i].ID].w1 += iris[i].w1;
        calculated_centroid[iris[i].ID].l2 += iris[i].l2;
        calculated_centroid[iris[i].ID].w2 += iris[i].w2;
        num[iris[i].ID]++;//计数 
    }
    printf("the number of each group:");
    printf("%d %d %d\n", num[0], num[1], num[2]);

    for (int i = 0; i < Cluster_num; i++){
        //计算平均值
        calculated_centroid[i].l1 /= (double) num[i];
        calculated_centroid[i].l2 /= (double) num[i];
        calculated_centroid[i].w1 /= (double) num[i];
        calculated_centroid[i].w2 /= (double) num[i];
        calculated_centroid[i].ID = i;
    }
}

int need_continue(){
    int flag = 0;
	//默认不需要继续
    for (int i = 0; i < Cluster_num; i++){
        //如果质心不相等
        if (calculated_centroid[i].l1 != original_centroid[i].l1 || calculated_centroid[i].w1 != original_centroid[i].w1 ||
            calculated_centroid[i].l2 != original_centroid[i].l2 || calculated_centroid[i].w2 != original_centroid[i].w2){
            flag = 1;
        }
    }
    return flag;
}

void write_result(char *fname){
    FILE *fp;
    if ((fp = fopen(fname, "w")) == NULL){
        printf("文件无法打开");
        exit(0);
    }
    for (int i = 0; i < data_num; i++){
        fprintf(fp, "%4d:%.1f,%.1f,%.1f,%.1f,Iris-%s ,%d\n",
                iris[i].num + 1, iris[i].l1, iris[i].w1, iris[i].l2, iris[i].w2, iris[i].name, iris[i].ID);
    }
    fclose(fp);
}

//Iris-setosa 0  Iris-versicolor 1  Iris-virginica 2
void analyze(char *fname){
    int num, a;
    double b;
    char name[20];
    int setosa[Cluster_num] = {0}, versicolor[Cluster_num] = {0}, virginica[Cluster_num] = {0};
    FILE *fp;
    if ((fp = fopen(fname, "a+")) == NULL){
        printf("文件无法打开");
        exit(0);
    }
    while (!feof(fp)){
        fscanf(fp, "%d:%lf,%lf,%lf,%lf,Iris-%s ,%d",
                    &a, &b, &b, &b, &b, name, &num);
        if      (!strcmp("setosa", name))     setosa[num]++;
        else if (!strcmp("versicolor", name)) versicolor[num]++;
        else if (!strcmp("virginica", name))  virginica[num]++;
    }
    fprintf(fp, "\naccuracy of each group:\n");
    fprintf(fp, "setosa:%.2f%%, versicolor:%.2f%%, virginica:%.2f%%\n", 
            get_max(setosa) * 100.0 / 50, get_max(versicolor) * 100.0 / 50, get_max(virginica) * 100.0 / 50);
    fprintf(fp, "\naccuracy of all data:%.2f%%", 
	(get_max(versicolor) + get_max(setosa) + get_max(virginica)) * 100.0 / data_num);
}

int get_max(int *a){
	//程序判断是Iris的哪一类是根据：某一组数据中哪一种输出结果最多（大众的心声归属于0/1/2） 
    int max = a[0];
    for (int i = 0; i < Cluster_num; i++){
        if (max < a[i]){
            max = a[i];
        }
    }
    return max;
}

/*
data.txt
5.1,3.5,1.4,0.2,Iris-setosa
4.9,3.0,1.4,0.2,Iris-setosa
4.7,3.2,1.3,0.2,Iris-setosa
4.6,3.1,1.5,0.2,Iris-setosa
5.0,3.6,1.4,0.2,Iris-setosa
5.4,3.9,1.7,0.4,Iris-setosa
4.6,3.4,1.4,0.3,Iris-setosa
5.0,3.4,1.5,0.2,Iris-setosa
4.4,2.9,1.4,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
5.4,3.7,1.5,0.2,Iris-setosa
4.8,3.4,1.6,0.2,Iris-setosa
4.8,3.0,1.4,0.1,Iris-setosa
4.3,3.0,1.1,0.1,Iris-setosa
5.8,4.0,1.2,0.2,Iris-setosa
5.7,4.4,1.5,0.4,Iris-setosa
5.4,3.9,1.3,0.4,Iris-setosa
5.1,3.5,1.4,0.3,Iris-setosa
5.7,3.8,1.7,0.3,Iris-setosa
5.1,3.8,1.5,0.3,Iris-setosa
5.4,3.4,1.7,0.2,Iris-setosa
5.1,3.7,1.5,0.4,Iris-setosa
4.6,3.6,1.0,0.2,Iris-setosa
5.1,3.3,1.7,0.5,Iris-setosa
4.8,3.4,1.9,0.2,Iris-setosa
5.0,3.0,1.6,0.2,Iris-setosa
5.0,3.4,1.6,0.4,Iris-setosa
5.2,3.5,1.5,0.2,Iris-setosa
5.2,3.4,1.4,0.2,Iris-setosa
4.7,3.2,1.6,0.2,Iris-setosa
4.8,3.1,1.6,0.2,Iris-setosa
5.4,3.4,1.5,0.4,Iris-setosa
5.2,4.1,1.5,0.1,Iris-setosa
5.5,4.2,1.4,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
5.0,3.2,1.2,0.2,Iris-setosa
5.5,3.5,1.3,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
4.4,3.0,1.3,0.2,Iris-setosa
5.1,3.4,1.5,0.2,Iris-setosa
5.0,3.5,1.3,0.3,Iris-setosa
4.5,2.3,1.3,0.3,Iris-setosa
4.4,3.2,1.3,0.2,Iris-setosa
5.0,3.5,1.6,0.6,Iris-setosa
5.1,3.8,1.9,0.4,Iris-setosa
4.8,3.0,1.4,0.3,Iris-setosa
5.1,3.8,1.6,0.2,Iris-setosa
4.6,3.2,1.4,0.2,Iris-setosa
5.3,3.7,1.5,0.2,Iris-setosa
5.0,3.3,1.4,0.2,Iris-setosa
7.0,3.2,4.7,1.4,Iris-versicolor
6.4,3.2,4.5,1.5,Iris-versicolor
6.9,3.1,4.9,1.5,Iris-versicolor
5.5,2.3,4.0,1.3,Iris-versicolor
6.5,2.8,4.6,1.5,Iris-versicolor
5.7,2.8,4.5,1.3,Iris-versicolor
6.3,3.3,4.7,1.6,Iris-versicolor
4.9,2.4,3.3,1.0,Iris-versicolor
6.6,2.9,4.6,1.3,Iris-versicolor
5.2,2.7,3.9,1.4,Iris-versicolor
5.0,2.0,3.5,1.0,Iris-versicolor
5.9,3.0,4.2,1.5,Iris-versicolor
6.0,2.2,4.0,1.0,Iris-versicolor
6.1,2.9,4.7,1.4,Iris-versicolor
5.6,2.9,3.6,1.3,Iris-versicolor
6.7,3.1,4.4,1.4,Iris-versicolor
5.6,3.0,4.5,1.5,Iris-versicolor
5.8,2.7,4.1,1.0,Iris-versicolor
6.2,2.2,4.5,1.5,Iris-versicolor
5.6,2.5,3.9,1.1,Iris-versicolor
5.9,3.2,4.8,1.8,Iris-versicolor
6.1,2.8,4.0,1.3,Iris-versicolor
6.3,2.5,4.9,1.5,Iris-versicolor
6.1,2.8,4.7,1.2,Iris-versicolor
6.4,2.9,4.3,1.3,Iris-versicolor
6.6,3.0,4.4,1.4,Iris-versicolor
6.8,2.8,4.8,1.4,Iris-versicolor
6.7,3.0,5.0,1.7,Iris-versicolor
6.0,2.9,4.5,1.5,Iris-versicolor
5.7,2.6,3.5,1.0,Iris-versicolor
5.5,2.4,3.8,1.1,Iris-versicolor
5.5,2.4,3.7,1.0,Iris-versicolor
5.8,2.7,3.9,1.2,Iris-versicolor
6.0,2.7,5.1,1.6,Iris-versicolor
5.4,3.0,4.5,1.5,Iris-versicolor
6.0,3.4,4.5,1.6,Iris-versicolor
6.7,3.1,4.7,1.5,Iris-versicolor
6.3,2.3,4.4,1.3,Iris-versicolor
5.6,3.0,4.1,1.3,Iris-versicolor
5.5,2.5,4.0,1.3,Iris-versicolor
5.5,2.6,4.4,1.2,Iris-versicolor
6.1,3.0,4.6,1.4,Iris-versicolor
5.8,2.6,4.0,1.2,Iris-versicolor
5.0,2.3,3.3,1.0,Iris-versicolor
5.6,2.7,4.2,1.3,Iris-versicolor
5.7,3.0,4.2,1.2,Iris-versicolor
5.7,2.9,4.2,1.3,Iris-versicolor
6.2,2.9,4.3,1.3,Iris-versicolor
5.1,2.5,3.0,1.1,Iris-versicolor
5.7,2.8,4.1,1.3,Iris-versicolor
6.3,3.3,6.0,2.5,Iris-virginica
5.8,2.7,5.1,1.9,Iris-virginica
7.1,3.0,5.9,2.1,Iris-virginica
6.3,2.9,5.6,1.8,Iris-virginica
6.5,3.0,5.8,2.2,Iris-virginica
7.6,3.0,6.6,2.1,Iris-virginica
4.9,2.5,4.5,1.7,Iris-virginica
7.3,2.9,6.3,1.8,Iris-virginica
6.7,2.5,5.8,1.8,Iris-virginica
7.2,3.6,6.1,2.5,Iris-virginica
6.5,3.2,5.1,2.0,Iris-virginica
6.4,2.7,5.3,1.9,Iris-virginica
6.8,3.0,5.5,2.1,Iris-virginica
5.7,2.5,5.0,2.0,Iris-virginica
5.8,2.8,5.1,2.4,Iris-virginica
6.4,3.2,5.3,2.3,Iris-virginica
6.5,3.0,5.5,1.8,Iris-virginica
7.7,3.8,6.7,2.2,Iris-virginica
7.7,2.6,6.9,2.3,Iris-virginica
6.0,2.2,5.0,1.5,Iris-virginica
6.9,3.2,5.7,2.3,Iris-virginica
5.6,2.8,4.9,2.0,Iris-virginica
7.7,2.8,6.7,2.0,Iris-virginica
6.3,2.7,4.9,1.8,Iris-virginica
6.7,3.3,5.7,2.1,Iris-virginica
7.2,3.2,6.0,1.8,Iris-virginica
6.2,2.8,4.8,1.8,Iris-virginica
6.1,3.0,4.9,1.8,Iris-virginica
6.4,2.8,5.6,2.1,Iris-virginica
7.2,3.0,5.8,1.6,Iris-virginica
7.4,2.8,6.1,1.9,Iris-virginica
7.9,3.8,6.4,2.0,Iris-virginica
6.4,2.8,5.6,2.2,Iris-virginica
6.3,2.8,5.1,1.5,Iris-virginica
6.1,2.6,5.6,1.4,Iris-virginica
7.7,3.0,6.1,2.3,Iris-virginica
6.3,3.4,5.6,2.4,Iris-virginica
6.4,3.1,5.5,1.8,Iris-virginica
6.0,3.0,4.8,1.8,Iris-virginica
6.9,3.1,5.4,2.1,Iris-virginica
6.7,3.1,5.6,2.4,Iris-virginica
6.9,3.1,5.1,2.3,Iris-virginica
5.8,2.7,5.1,1.9,Iris-virginica
6.8,3.2,5.9,2.3,Iris-virginica
6.7,3.3,5.7,2.5,Iris-virginica
6.7,3.0,5.2,2.3,Iris-virginica
6.3,2.5,5.0,1.9,Iris-virginica
6.5,3.0,5.2,2.0,Iris-virginica
6.2,3.4,5.4,2.3,Iris-virginica
5.9,3.0,5.1,1.8,Iris-virginica
*/